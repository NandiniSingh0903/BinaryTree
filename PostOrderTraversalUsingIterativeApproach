//Leetcode: 145

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> out = new ArrayList<Integer>();
	    if(root == null)
		    return out;
	    TreeNode dummy = new TreeNode(-1), pre = null;
	    dummy.left = root; root = dummy;
	    while(root != null){
		    if(root.left != null){
			    pre = root.left;
			    while(pre.right != null && pre.right != root){
				pre=pre.right;
                }
			    if(pre.right == null){
				    pre.right = root;
				    root = root.left;
			    }
			    else{
				    TreeNode node = pre;
				    reverse(root.left,pre);
				    while(node != root.left){
					    out.add(node.val);
					    node = node.right;
				    }
				    out.add(node.val);          
				    reverse(pre,root.left);
				    pre.right = null;
				    root = root.right;
			    }
		    }
		    else{
			    root = root.right;
		    }
	    }
	    return out;
    }

		public void reverse(TreeNode from, TreeNode to){
    	if(from == to)
        	return;
    	TreeNode prev = from, node = from.right;
    	while(prev != to){
        	TreeNode next = node.right;
        	node.right = prev;
        	prev = node;
        	node = next;
    	}
		}
}
